 //数组操作方法
 // Array.from()
            // ... 拓展运算符 也能把某些数据结构转换为数组
            // Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）
            // let arrayLike = {
            //     '0': 'a',
            //     '1': 'b',
            //     '2': 'c',
            //     length: 3
            // };
            // console.log(Array.from(arrayLike))
            
            // Array.of
            // Array.of方法用于将一组值，转换为数组
            // Array.of(3,11,8)            //[3,11,8]

            // copyWithin
            // 数组实例的copyWithin()方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组
            // 它接受三个参数。

                // target（必需）：从该位置开始替换数据。如果为负值，表示倒数。
                // start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。
                // end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。

                // let arr = [1,2,3,4,5,6,7];
                // arr.copyWithin(1,5);
                // console.log(arr)
            
            // 数组实例的 find() 和 findIndex()
                // let n = [1,3,5,67,83,2,5];
                // n.find(n => {
                //     n === 5
                // })
                // n.find(n => n === 5);       //5
                // n.findIndex(n => n === 5)   //2
                
                // let data = [
                //     {a:2},
                //     {a:9},
                //     {a:5},
                //     {a:4}
                // ]
                // data.find(val => val.a === 9);      //{a:9}
                // data.findIndex(val => val.a === 9)  //1

            // 数组实例的 flat()，flatMap()
            // 数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响

                // let list = [1,2,3,[7,8],4];
                // list.flat()  // ==>  [1,2,3,7,8,4]
                // console.log(list.flat())

                // flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1
                // let arr = [1,2,3,4,[5,[6,7,9,[0]]]];
                // arr.flat()      //==>[1,2,3,4,5,[6,7,9,[0]]]
                // arr.flat(2)     //==>[1,2,3,4,5,6,7,9,[0]]
                // arr.flat(3)     //==>[1,2,3,4,5,6,7,9,0]
                // console.log(arr.flat(3))

            //数组操作方法
            // forEach方法
                // [,'a'].forEach((x,i) => console.log(i)); // 1

                // // filter方法
                // ['a',,'b'].filter(x => true) // ['a','b']

                // // every方法
                // [,'a'].every(x => x==='a') // true

                // // reduce方法
                // [1,,2].reduce((x,y) => x+y) // 3

                // // some方法
                // [,'a'].some(x => x !== 'a') // false

                // // map方法
                // [,'a'].map(x => 1) // [,1]

                // // join方法
                // [,'a',undefined,null].join('#') // "#a##"

                // // toString方法
                // [,'a',undefined,null].toString() // ",a,,"
